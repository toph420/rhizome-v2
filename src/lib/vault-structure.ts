import { promises as fs } from 'fs'
import * as path from 'path'

/**
 * Vault structure configuration
 */
export interface VaultConfig {
  vaultPath: string      // Absolute path to vault root
  vaultName: string      // Vault name (for Obsidian URIs)
  rhizomePath: string    // Relative path within vault (default: "Rhizome/")
}

/**
 * Complete vault structure
 */
export interface VaultStructure {
  documents: string      // Rhizome/Documents/
  connections: string    // Rhizome/Connections/
  sparks: string        // Rhizome/Sparks/
  index: string         // Rhizome/Index/
}

/**
 * Get vault structure paths
 */
export function getVaultStructure(config: VaultConfig): VaultStructure {
  const base = path.join(config.vaultPath, config.rhizomePath)

  return {
    documents: path.join(base, 'Documents'),
    connections: path.join(base, 'Connections'),
    sparks: path.join(base, 'Sparks'),
    index: path.join(base, 'Index')
  }
}

/**
 * Get document vault path
 * Returns: Rhizome/Documents/{title}/
 */
export function getDocumentVaultPath(
  config: VaultConfig,
  documentTitle: string
): string {
  const structure = getVaultStructure(config)
  return path.join(structure.documents, sanitizeFilename(documentTitle))
}

/**
 * Create vault directory structure
 * Idempotent - safe to call multiple times
 */
export async function createVaultStructure(config: VaultConfig): Promise<void> {
  const structure = getVaultStructure(config)

  // Create all directories
  await fs.mkdir(structure.documents, { recursive: true })
  await fs.mkdir(structure.connections, { recursive: true })
  await fs.mkdir(path.join(structure.connections, 'by-theme'), { recursive: true })
  await fs.mkdir(path.join(structure.connections, 'by-type'), { recursive: true })
  await fs.mkdir(structure.sparks, { recursive: true })
  await fs.mkdir(structure.index, { recursive: true })

  // Create README if it doesn't exist
  const readmePath = path.join(structure.index, 'README.md')
  try {
    await fs.access(readmePath)
  } catch {
    await fs.writeFile(readmePath, generateVaultReadme(), 'utf-8')
  }

  console.log(`[VaultStructure] âœ… Vault structure created at ${config.vaultPath}`)
}

/**
 * Validate vault structure exists
 */
export async function validateVaultStructure(config: VaultConfig): Promise<{
  valid: boolean
  missing: string[]
}> {
  const structure = getVaultStructure(config)
  const missing: string[] = []

  const requiredDirs = [
    structure.documents,
    structure.connections,
    structure.sparks,
    structure.index
  ]

  for (const dir of requiredDirs) {
    try {
      await fs.access(dir)
    } catch {
      missing.push(dir)
    }
  }

  return {
    valid: missing.length === 0,
    missing
  }
}

/**
 * Sanitize filename for filesystem safety
 * Removes: / \ : * ? " < > |
 * Replaces with: -
 */
function sanitizeFilename(filename: string): string {
  return filename.replace(/[/\\:*?"<>|]/g, '-')
}

/**
 * Generate vault README.md
 */
function generateVaultReadme(): string {
  return `# Rhizome Knowledge Vault

This vault is automatically synced from Rhizome V2.

## Structure

- **Documents/**: All processed documents with annotations and connections
- **Connections/**: Global connection graphs (by theme and type)
- **Sparks/**: Daily quick captures and thoughts
- **Index/**: Navigation and overview files

## Editing

You can edit any markdown file. Changes sync back to Rhizome when you:
1. Save your changes in Obsidian
2. Click "Sync from Vault" in Rhizome Admin Panel

## Metadata

Each document has a \`.rhizome/\` folder containing:
- \`chunks.json\` - Processed chunks with AI metadata
- \`metadata.json\` - Document metadata
- \`manifest.json\` - Processing manifest
- \`source-ref.json\` - Reference to original file

**Do not edit** these JSON files manually.

---

ðŸ”— **Generated by Rhizome V2** - AI-powered document processing and knowledge synthesis
`
}
